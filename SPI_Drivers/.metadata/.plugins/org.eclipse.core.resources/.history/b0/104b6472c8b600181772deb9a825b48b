#include "hal_spi_driver.h"
#include "stm32f4xx_gpio_driver.h"
#include "stm32f4xx_gpio_driver.h"
#include <stdbool.h>

#define BYTES_TO_READ		 	1
#define ADX_PIN					10
#define ADX_PORT					GPIOC

#define ADXL345_DEVID			0x00
#define ADXL345_THRESH_ACT		0x24
#define ADXL345_THRESH_INACT		0x25		// Inactivity Threshold
#define ADXL345_TIME_INACT		0x26		// Inactivity Time
#define ADXL345_ACT_INACT_CTL	0x27
#define ADXL345_TAP_AXES			0x2A		// Axis Control for Tap/Double Tap
#define ADXL345_THRESH_TAP		0x1D		// Tap Threshold
#define ADXL345_THRESH_FF		0x28		// Free-Fall Threshold
#define ADXL345_TIME_FF			0x29		// Free-Fall Time
#define ADXL345_POWER_CTL		0x2D		// Power-Saving Features Control

#define ADXL345_DATA_FORMAT		0x31
#define ADXL345_DATAX0			0x32		// X-Axis Data 0
#define ADXL345_DATAX1			0x33		// X-Axis Data 1
#define ADXL345_DATAY0			0x34		// Y-Axis Data 0
#define ADXL345_DATAY1			0x35		// Y-Axis Data 1
#define ADXL345_DATAZ0			0x36		// Z-Axis Data 0
#define ADXL345_DATAZ1			0x37		// Z-Axis Data 1


uint8_t buffer[BYTES_TO_READ];

void adxPin_init();
void powerOn(spi_handle_t spiHandle);
void setSPI(bool state, spi_handle_t spiHandle);
void setActivityXYZ(bool stateX, bool stateY, bool stateZ, spi_handle_t spiHandle);
void setInactivityXYZ(bool stateX, bool stateY, bool stateZ, spi_handle_t spiHandle);
void setInactivityThreshold(uint8_t inactivityThreshold, spi_handle_t spiHandle);
void setTimeInactivity(uint8_t timeInactivity, spi_handle_t spiHandle);
void setTapDetectionOnXYZ(bool stateX, bool stateY, bool stateZ, spi_handle_t spiHandle);
void setTapThreshold(uint8_t tapThreshold, spi_handle_t spiHandle);
void setFreeFallThreshold(uint8_t freeFallThreshold, spi_handle_t spiHandle);
void setFreeFallDuration(uint8_t freeFallDuration, spi_handle_t spiHandle);
void setActivityThreshold(uint8_t activityThreshold, spi_handle_t spiHandle);

void readFrom(uint8_t address, uint8_t bytes_to_read, uint8_t buff[], spi_handle_t spiHandle);
void readAccel(spi_handle_t spiHandle);
void writeTo(uint8_t address, uint8_t data, spi_handle_t spiHandle);
//void readAccel(int *x, int *y, int *z);
